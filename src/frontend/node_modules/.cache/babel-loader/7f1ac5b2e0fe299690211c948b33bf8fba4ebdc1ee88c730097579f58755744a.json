{"ast":null,"code":"var _jsxFileName = \"/Users/kimsoulbee/Documents/qc_backend/src/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const fetchUser = async () => {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        try {\n          const response = await axios.get(\"http://localhost:8080/api/user\", {\n            params: {\n              id: localStorage.getItem(\"userId\")\n            },\n            // `id`를 쿼리 파라미터로 포함\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          setUser(response.data);\n        } catch (error) {\n          var _error$response;\n          console.error(\"User fetch error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"userId\");\n          setUser(null);\n        }\n      }\n    };\n    fetchUser();\n  }, []);\n  const login = async (id, password) => {\n    try {\n      const response = await axios.post(\"http://localhost:8080/api/login\", {\n        id,\n        password\n      });\n      if (response.data.token) {\n        localStorage.setItem(\"token\", response.data.token);\n        localStorage.setItem(\"userId\", id); // `id`를 로컬 스토리지에 저장\n\n        const userResponse = await axios.get(\"http://localhost:8080/api/user\", {\n          params: {\n            id\n          },\n          // 로그인한 사용자 ID를 쿼리 파라미터로 전달\n          headers: {\n            Authorization: `Bearer ${response.data.token}`\n          }\n        });\n        setUser(userResponse.data);\n        return true;\n      }\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Login error:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    }\n    return false;\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"userId\");\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","fetchUser","token","localStorage","getItem","response","get","params","id","headers","Authorization","data","error","_error$response","console","message","removeItem","login","password","post","setItem","userResponse","_error$response2","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/kimsoulbee/Documents/qc_backend/src/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        try {\n          const response = await axios.get(\"http://localhost:8080/api/user\", {\n            params: { id: localStorage.getItem(\"userId\") }, // `id`를 쿼리 파라미터로 포함\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          setUser(response.data);\n        } catch (error) {\n          console.error(\n            \"User fetch error:\",\n            error.response?.data || error.message\n          );\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"userId\");\n          setUser(null);\n        }\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  const login = async (id, password) => {\n    try {\n      const response = await axios.post(\"http://localhost:8080/api/login\", {\n        id,\n        password,\n      });\n\n      if (response.data.token) {\n        localStorage.setItem(\"token\", response.data.token);\n        localStorage.setItem(\"userId\", id); // `id`를 로컬 스토리지에 저장\n\n        const userResponse = await axios.get(\"http://localhost:8080/api/user\", {\n          params: { id }, // 로그인한 사용자 ID를 쿼리 파라미터로 전달\n          headers: { Authorization: `Bearer ${response.data.token}` },\n        });\n\n        setUser(userResponse.data);\n        return true;\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error.response?.data || error.message);\n    }\n    return false;\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"userId\");\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}